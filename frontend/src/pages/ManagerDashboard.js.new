import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import api from '../utils/api';
import ProjectDetailModal from '../components/ProjectDetailModal';
import { Modal, Button } from 'react-bootstrap';

const ManagerDashboard = () => {
  const { user } = useAuth();
  const [projects, setProjects] = useState([]);
  const [stats, setStats] = useState({
    total: 0,
    active: 0,
    completed: 0,
    pending: 0,
    extensions: 0
  });
  const [selectedProject, setSelectedProject] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showSubmissionForm, setShowSubmissionForm] = useState(false);
  const [submissionLink, setSubmissionLink] = useState('');
  const [showProjectModal, setShowProjectModal] = useState(false);
  
  // Action loading states
  const [actionInProgress, setActionInProgress] = useState({});

  // Fetch all projects
  useEffect(() => {
    const fetchProjects = async () => {
      try {
        setLoading(true);
        setError(null);
        console.log('Fetching manager projects...');
        
        const res = await api.get('/projects/manager/all');
        console.log('Projects data received:', res.data);
        
        // Check if response data is valid
        if (!res.data || !Array.isArray(res.data)) {
          console.error('Invalid response data format:', res.data);
          setError('Received invalid data from server. Please reload.');
          setProjects([]);
          return;
        }
        
        setProjects(res.data);
        
        // Calculate statistics
        const active = res.data.filter(p => p.status === 'accepted').length;
        const completed = res.data.filter(p => p.status === 'completed').length;
        const pending = res.data.filter(p => p.status === 'pending').length;
        const extensions = res.data.filter(p => 
          p.status === 'deadline_extension_requested' || 
          p.status === 'deadline_extension_approved'
        ).length;
        
        setStats({
          total: res.data.length,
          active,
          completed,
          pending,
          extensions
        });
        
        setError(null);
      } catch (err) {
        console.error('Error fetching projects:', err);
        setError('Failed to load projects: ' + (err.response?.data?.message || err.message || 'Unknown error'));
        // Set empty projects array on error
        setProjects([]);
      } finally {
        setLoading(false);
      }
    };

    if (user && user.id) {
      fetchProjects();
    } else {
      console.log('No user ID available, not fetching projects');
      setLoading(false);
    }
  }, [user]);

  // Function to view project details
  const viewProjectDetails = (project) => {
    setSelectedProject(project);
    setShowProjectModal(true);
  };

  // Handle project status update (accept/reject) with loading state
  const handleUpdateStatus = async (projectId, newStatus) => {
    try {
      console.log(`Updating project ${projectId} status to ${newStatus}`);
      
      // Set loading state for this specific project action
      setActionInProgress(prev => ({ ...prev, [projectId]: true }));
      setError(null);
      
      const res = await api.patch(
        `/projects/${projectId}/status`,
        { status: newStatus }
      );
      
      console.log('Status updated successfully:', res.data);
      
      // Update the project in the list
      const updatedProjects = projects.map(p => 
        p._id === projectId ? res.data : p
      );
      
      setProjects(updatedProjects);
      
      // Update stats based on new status
      if (newStatus === 'accepted') {
        setStats({
          ...stats,
          active: stats.active + 1,
          pending: stats.pending - 1
        });
      } else if (newStatus === 'rejected') {
        setStats({
          ...stats,
          pending: stats.pending - 1
        });
      } else if (newStatus === 'completed') {
        setStats({
          ...stats,
          active: stats.active - 1,
          completed: stats.completed + 1
        });
      }
      
      // Show success message
      alert(`Project ${newStatus === 'accepted' ? 'accepted' : 'rejected'} successfully`);
    } catch (err) {
      console.error(`Error updating project status to ${newStatus}:`, err);
      setError(`Failed to update project status. Please try again.`);
      alert(`Failed to update project status: ${err.message}`);
    } finally {
      // Clear loading state for this specific project action
      setActionInProgress(prev => ({ ...prev, [projectId]: false }));
    }
  };

  // Handle request for deadline extension
  const handleRequestExtension = async (projectId) => {
    try {
      setActionInProgress(prev => ({ ...prev, [projectId]: true }));
      setError(null);
      
      const res = await api.patch(`/projects/${projectId}/request-extension`, {});
      
      // Update projects after request
      const updatedProjects = projects.map(p => 
        p._id === projectId ? { ...p, status: 'deadline_extension_requested' } : p
      );
      
      setProjects(updatedProjects);
      
      // Update stats
      setStats({
        ...stats,
        active: stats.active - 1,
        extensions: stats.extensions + 1
      });
      
      alert('Extension request sent to client');
    } catch (err) {
      console.error('Error requesting deadline extension:', err);
      setError('Failed to request deadline extension. Please try again.');
      alert(`Failed to request extension: ${err.message}`);
    } finally {
      setActionInProgress(prev => ({ ...prev, [projectId]: false }));
    }
  };
  
  // Open submission form
  const openSubmissionForm = (project) => {
    setSelectedProject(project);
    setSubmissionLink('');
    setShowSubmissionForm(true);
  };

  // Handle project submission
  const handleProjectSubmission = async (e) => {
    e.preventDefault();
    
    try {
      setActionInProgress(prev => ({ ...prev, [selectedProject._id]: true }));
      setError(null);
      
      if (!submissionLink.trim()) {
        alert('Please enter a valid submission link');
        return;
      }
      
      const res = await api.patch(
        `/projects/${selectedProject._id}/submit`,
        { submissionLink }
      );
      
      console.log('Project submitted successfully:', res.data);
      
      // Update the project in the list
      const updatedProjects = projects.map(p => 
        p._id === selectedProject._id ? res.data : p
      );
      
      setProjects(updatedProjects);
      
      // Update stats
      setStats({
        ...stats,
        active: stats.active - 1,
        completed: stats.completed + 1
      });
      
      // Close the submission form
      setShowSubmissionForm(false);
      setSelectedProject(null);
      
      alert('Project submitted successfully');
    } catch (err) {
      console.error('Error submitting project:', err);
      setError('Failed to submit project. Please try again.');
      alert(`Failed to submit project: ${err.message}`);
    } finally {
      setActionInProgress(prev => ({ ...prev, [selectedProject._id]: false }));
    }
  };

  // Format date helper function
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };

  // Helper function to get formatted status with proper color
  const getStatusBadge = (status) => {
    const statusMap = {
      pending: { text: 'Pending Approval', class: 'bg-warning' },
      accepted: { text: 'In Progress', class: 'bg-info' },
      rejected: { text: 'Rejected', class: 'bg-danger' },
      completed: { text: 'Completed', class: 'bg-success' },
      deadline_extension_requested: { text: 'Extension Requested', class: 'bg-secondary' },
      deadline_extension_approved: { text: 'Extension Approved', class: 'bg-primary' }
    };

    const statusInfo = statusMap[status] || { text: status, class: 'bg-secondary' };
    
    return (
      <span className={`badge ${statusInfo.class}`}>
        {statusInfo.text}
      </span>
    );
  };

  return (
    <div className="container-fluid py-4">
      <div className="row">
        <div className="col-12">
          <h1 className="display-5 mb-4">Manager Dashboard</h1>
          
          {error && (
            <div className="alert alert-danger mb-4" role="alert">
              {error}
            </div>
          )}
          
          {/* Stats Cards */}
          <div className="row mb-4">
            <div className="col-md-4 col-lg-2 mb-3 mb-lg-0">
              <div className="card border-0 shadow-sm h-100">
                <div className="card-body text-center">
                  <h5 className="text-muted mb-1">Total Projects</h5>
                  <h2 className="display-6 fw-bold">{stats.total}</h2>
                </div>
              </div>
            </div>
            <div className="col-md-4 col-lg-2 mb-3 mb-lg-0">
              <div className="card border-0 shadow-sm h-100">
                <div className="card-body text-center">
                  <h5 className="text-muted mb-1">Pending</h5>
                  <h2 className="display-6 fw-bold text-warning">{stats.pending}</h2>
                </div>
              </div>
            </div>
            <div className="col-md-4 col-lg-2 mb-3 mb-lg-0">
              <div className="card border-0 shadow-sm h-100">
                <div className="card-body text-center">
                  <h5 className="text-muted mb-1">Active</h5>
                  <h2 className="display-6 fw-bold text-primary">{stats.active}</h2>
                </div>
              </div>
            </div>
            <div className="col-md-4 col-lg-2 mb-3 mb-lg-0">
              <div className="card border-0 shadow-sm h-100">
                <div className="card-body text-center">
                  <h5 className="text-muted mb-1">Completed</h5>
                  <h2 className="display-6 fw-bold text-success">{stats.completed}</h2>
                </div>
              </div>
            </div>
            <div className="col-md-4 col-lg-2 mb-3 mb-lg-0">
              <div className="card border-0 shadow-sm h-100">
                <div className="card-body text-center">
                  <h5 className="text-muted mb-1">Extensions</h5>
                  <h2 className="display-6 fw-bold text-secondary">{stats.extensions}</h2>
                </div>
              </div>
            </div>
            <div className="col-md-4 col-lg-2 mb-3 mb-lg-0">
              <div className="card border-0 bg-gradient-primary shadow-sm h-100">
                <div className="card-body text-center">
                  <h5 className="text-white mb-1">Avg. Completion</h5>
                  <h2 className="display-6 fw-bold text-white">
                    {stats.completed > 0 ? `${Math.round((stats.completed / stats.total) * 100)}%` : '0%'}
                  </h2>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Project Submission Modal */}
      {showSubmissionForm && selectedProject && (
        <div className="modal fade show" style={{display: 'block', backgroundColor: 'rgba(0,0,0,0.5)'}} tabIndex="-1">
          <div className="modal-dialog modal-dialog-centered">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Submit Completed Project</h5>
                <button 
                  type="button" 
                  className="btn-close" 
                  onClick={() => setShowSubmissionForm(false)}
                  aria-label="Close"
                ></button>
              </div>
              <div className="modal-body">
                <form onSubmit={handleProjectSubmission}>
                  <div className="mb-3">
                    <label htmlFor="projectName" className="form-label">Project</label>
                    <input
                      type="text"
                      className="form-control"
                      id="projectName"
                      value={selectedProject.title}
                      readOnly
                    />
                  </div>
                  <div className="mb-3">
                    <label htmlFor="submissionLink" className="form-label">Submission Link*</label>
                    <input
                      type="text"
                      className="form-control"
                      id="submissionLink"
                      placeholder="https://drive.google.com/file/..."
                      value={submissionLink}
                      onChange={(e) => setSubmissionLink(e.target.value)}
                      required
                    />
                    <div className="form-text">
                      Provide a link to Google Drive, Dropbox, or any file sharing service where client can download the completed video
                    </div>
                  </div>
                  
                  <div className="d-flex justify-content-end">
                    <div className="d-flex gap-2">
                      <button 
                        type="button" 
                        className="btn btn-secondary" 
                        onClick={() => {
                          setShowSubmissionForm(false);
                          setSelectedProject(null);
                        }}
                      >
                        Cancel
                      </button>
                      <button 
                        type="submit" 
                        className="btn btn-success"
                        disabled={actionInProgress[selectedProject._id]}
                      >
                        {actionInProgress[selectedProject._id] ? (
                          <><span className="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Processing...</>
                        ) : 'Submit Project'}
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="row mt-4">
        <div className="col-12">
          {/* Project Management Tabs */}
          <div className="card border-0 shadow-sm">
            <div className="card-header bg-white">
              <ul className="nav nav-tabs card-header-tabs" role="tablist">
                <li className="nav-item" role="presentation">
                  <button 
                    className="nav-link active" 
                    id="pending-tab" 
                    data-bs-toggle="tab" 
                    data-bs-target="#pending" 
                    type="button" 
                    role="tab"
                    aria-controls="pending"
                    aria-selected="true"
                  >
                    Pending Approval ({projects.filter(p => p.status === 'pending').length})
                  </button>
                </li>
                <li className="nav-item" role="presentation">
                  <button 
                    className="nav-link" 
                    id="active-tab" 
                    data-bs-toggle="tab" 
                    data-bs-target="#active" 
                    type="button" 
                    role="tab"
                    aria-controls="active"
                    aria-selected="false"
                  >
                    My Active Projects ({projects.filter(p => p.status === 'accepted').length})
                  </button>
                </li>
                <li className="nav-item" role="presentation">
                  <button 
                    className="nav-link" 
                    id="extension-tab" 
                    data-bs-toggle="tab" 
                    data-bs-target="#extension" 
                    type="button" 
                    role="tab"
                    aria-controls="extension"
                    aria-selected="false"
                  >
                    Extension Requests ({projects.filter(p => p.status === 'deadline_extension_approved').length})
                  </button>
                </li>
                <li className="nav-item" role="presentation">
                  <button 
                    className="nav-link" 
                    id="completed-tab" 
                    data-bs-toggle="tab" 
                    data-bs-target="#completed" 
                    type="button" 
                    role="tab"
                    aria-controls="completed"
                    aria-selected="false"
                  >
                    Completed Projects ({projects.filter(p => p.status === 'completed').length})
                  </button>
                </li>
              </ul>
            </div>
            <div className="card-body">
              <div className="tab-content">
                {/* Pending Projects Tab */}
                <div className="tab-pane fade show active" id="pending" role="tabpanel" aria-labelledby="pending-tab">
                  {loading ? (
                    <div className="text-center py-4">
                      <div className="spinner-border text-primary" role="status">
                        <span className="visually-hidden">Loading...</span>
                      </div>
                    </div>
                  ) : projects.filter(p => p.status === 'pending').length === 0 ? (
                    <div className="text-center py-4">
                      <p className="mb-0">No pending projects requiring approval.</p>
                    </div>
                  ) : (
                    <div className="table-responsive">
                      <table className="table table-hover">
                        <thead>
                          <tr>
                            <th>Project Name</th>
                            <th>Client</th>
                            <th>Type</th>
                            <th>Deadline</th>
                            <th>Budget</th>
                            <th>Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {projects
                            .filter(project => project.status === 'pending')
                            .map((project) => (
                              <tr key={project._id}>
                                <td>
                                  <a href="#" onClick={(e) => {
                                    e.preventDefault();
                                    viewProjectDetails(project);
                                  }}>
                                    {project.title}
                                  </a>
                                </td>
                                <td>{project.client.name}</td>
                                <td>{project.workType === 'short' ? 'Short Video' : 'Long Video'}</td>
                                <td>{formatDate(project.deadline)}</td>
                                <td>${project.budget}</td>
                                <td>
                                  <button 
                                    className="btn btn-sm btn-success me-2"
                                    onClick={() => handleUpdateStatus(project._id, 'accepted')}
                                    disabled={actionInProgress[project._id]}
                                  >
                                    {actionInProgress[project._id] ? (
                                      <><span className="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Processing...</>
                                    ) : (
                                      'Accept'
                                    )}
                                  </button>
                                  <button 
                                    className="btn btn-sm btn-danger me-2"
                                    onClick={() => handleUpdateStatus(project._id, 'rejected')}
                                    disabled={actionInProgress[project._id]}
                                  >
                                    {actionInProgress[project._id] ? (
                                      <><span className="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Processing...</>
                                    ) : (
                                      'Reject'
                                    )}
                                  </button>
                                </td>
                              </tr>
                            ))}
                        </tbody>
                      </table>
                    </div>
                  )}
                </div>
                
                {/* Active Projects Tab */}
                <div className="tab-pane fade" id="active" role="tabpanel" aria-labelledby="active-tab">
                  {loading ? (
                    <div className="text-center py-4">
                      <div className="spinner-border text-primary" role="status">
                        <span className="visually-hidden">Loading...</span>
                      </div>
                    </div>
                  ) : projects.filter(p => p.status === 'accepted').length === 0 ? (
                    <div className="text-center py-4">
                      <p className="mb-0">No active projects. Accept new projects to see them here.</p>
                    </div>
                  ) : (
                    <div className="table-responsive">
                      <table className="table table-hover">
                        <thead>
                          <tr>
                            <th>Project Name</th>
                            <th>Client</th>
                            <th>Type</th>
                            <th>Deadline</th>
                            <th>Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {projects
                            .filter(project => project.status === 'accepted')
                            .map((project) => (
                              <tr key={project._id}>
                                <td>
                                  <a href="#" onClick={(e) => {
                                    e.preventDefault();
                                    viewProjectDetails(project);
                                  }}>
                                    {project.title}
                                  </a>
                                </td>
                                <td>{project.client.name}</td>
                                <td>{project.workType === 'short' ? 'Short Video' : 'Long Video'}</td>
                                <td>{formatDate(project.deadline)}</td>
                                <td>
                                  <button 
                                    className="btn btn-sm btn-warning me-2"
                                    onClick={() => handleRequestExtension(project._id)}
                                    disabled={actionInProgress[project._id]}
                                  >
                                    {actionInProgress[project._id] ? (
                                      <><span className="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Processing...</>
                                    ) : (
                                      'Request Extension'
                                    )}
                                  </button>
                                  <button 
                                    className="btn btn-sm btn-success"
                                    onClick={() => openSubmissionForm(project)}
                                  >
                                    Submit Work
                                  </button>
                                </td>
                              </tr>
                            ))}
                        </tbody>
                      </table>
                    </div>
                  )}
                </div>

                {/* Extension Requests Tab */}
                <div className="tab-pane fade" id="extension" role="tabpanel" aria-labelledby="extension-tab">
                  {loading ? (
                    <div className="text-center py-4">
                      <div className="spinner-border text-primary" role="status">
                        <span className="visually-hidden">Loading...</span>
                      </div>
                    </div>
                  ) : projects.filter(p => p.status === 'deadline_extension_approved').length === 0 ? (
                    <div className="text-center py-4">
                      <p className="mb-0">No approved extension requests.</p>
                    </div>
                  ) : (
                    <div className="table-responsive">
                      <table className="table table-hover">
                        <thead>
                          <tr>
                            <th>Project Name</th>
                            <th>Client</th>
                            <th>Original Deadline</th>
                            <th>New Deadline</th>
                            <th>Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {projects
                            .filter(project => project.status === 'deadline_extension_approved')
                            .map((project) => (
                              <tr key={project._id}>
                                <td>
                                  <a href="#" onClick={(e) => {
                                    e.preventDefault();
                                    viewProjectDetails(project);
                                  }}>
                                    {project.title}
                                  </a>
                                </td>
                                <td>{project.client.name}</td>
                                <td>
                                  <s className="text-muted">{formatDate(project.createdAt)}</s>
                                </td>
                                <td className="text-success">{formatDate(project.deadline)}</td>
                                <td>
                                  <button 
                                    className="btn btn-sm btn-success"
                                    onClick={() => openSubmissionForm(project)}
                                  >
                                    Submit Work
                                  </button>
                                </td>
                              </tr>
                            ))}
                        </tbody>
                      </table>
                    </div>
                  )}
                </div>

                {/* Completed Projects Tab */}
                <div className="tab-pane fade" id="completed" role="tabpanel" aria-labelledby="completed-tab">
                  {loading ? (
                    <div className="text-center py-4">
                      <div className="spinner-border text-primary" role="status">
                        <span className="visually-hidden">Loading...</span>
                      </div>
                    </div>
                  ) : projects.filter(p => p.status === 'completed').length === 0 ? (
                    <div className="text-center py-4">
                      <p className="mb-0">No completed projects.</p>
                    </div>
                  ) : (
                    <div className="table-responsive">
                      <table className="table table-hover">
                        <thead>
                          <tr>
                            <th>Project Name</th>
                            <th>Client</th>
                            <th>Type</th>
                            <th>Completion Date</th>
                            <th>Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {projects
                            .filter(project => project.status === 'completed')
                            .map((project) => (
                              <tr key={project._id}>
                                <td>
                                  <a href="#" onClick={(e) => {
                                    e.preventDefault();
                                    viewProjectDetails(project);
                                  }}>
                                    {project.title}
                                  </a>
                                </td>
                                <td>{project.client.name}</td>
                                <td>{project.workType === 'short' ? 'Short Video' : 'Long Video'}</td>
                                <td>{formatDate(project.updatedAt)}</td>
                                <td>
                                  <button 
                                    className="btn btn-sm btn-outline-primary me-2"
                                    onClick={() => viewProjectDetails(project)}
                                  >
                                    View
                                  </button>
                                  {project.submissionLink && (
                                    <a
                                      href={project.submissionLink}
                                      target="_blank"
                                      rel="noreferrer"
                                      className="btn btn-sm btn-success"
                                    >
                                      View Submission
                                    </a>
                                  )}
                                </td>
                              </tr>
                            ))}
                        </tbody>
                      </table>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Project Details Modal */}
      <ProjectDetailModal
        show={showProjectModal}
        onHide={() => setShowProjectModal(false)}
        project={selectedProject}
        formatDate={formatDate}
        getStatusBadge={getStatusBadge}
        onSubmitWork={selectedProject && selectedProject.status === 'accepted' ? 
          () => {
            setShowProjectModal(false);
            openSubmissionForm(selectedProject);
          } : null
        }
      />
    </div>
  );
};

export default ManagerDashboard;
